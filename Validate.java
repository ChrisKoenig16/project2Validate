package cmsc433;

import java.util.List;
import cmsc433.SimulationEvent;

/**
 * Validates a simulation
 */
public class Validate {
	private static class InvalidSimulationException extends Exception {

		private static final long serialVersionUID = 1L;

		public InvalidSimulationException() {
		}
	};

	// Helper method for validating the simulation
	private static void check(boolean check,
			String message) throws InvalidSimulationException {
		if (!check) {
			System.err.println("SIMULATION INVALID : " + message);
			throw new Validate.InvalidSimulationException();
		}
	}
	

	/*
	 * In P2 you will write validation code for things such as:
	 * Should not have more eaters than specified
	 * Should not have more cooks than specified
	 * The Ratsie's capacity should not be exceeded
	 * The capacity of each machine should not be exceeded
	 * Eater should not receive order until cook completes it
	 * Eater should not leave Ratsie's until order is received
	 * Eater should not place more than one order
	 * Cook should not work on order before it is placed
	 */


	/**
	 * Validates the given list of events is a valid simulation.
	 * Returns true if the simulation is valid, false otherwise.
	 *
	 * @param events - a list of events generated by the simulation
	 *        in the order they were generated.
	 *
	 * @returns res - whether the simulation was valid or not
	 * 
	 */

	/* 
	 * This method checks these conditions ->
	 * 
	 * Should not have more eaters than specified
	 * Should not have more cooks than specified
	 * The Ratsie's capacity should not be exceeded
	 * The capacity of each machine should not be exceeded
	 */
	private static boolean checkParams(List<SimulationEvent> events) {
		int[] params = events.get(0).simParams;
		int numCustomers = params[0]; 
		int numCooks = params[1];
		int numTables = params[2];
		int machineCount = params[3];
		int[] machineCapacities = new int[4];
		int curCustomers = 0;
		int curCooks = 0;
		int curCapacity = 0;
		SimulationEvent curEvent;
		for(int i = 1; i < events.size(); i++) {
			curEvent = events.get(i);
			switch(curEvent.event) {
			case CustomerStarting:
				curCustomers++;
				break;
			case CookStarting:
				curCooks++;
				break;
			case CustomerEnteredRatsies:
				curCapacity++;
				break;
			case CustomerLeavingRatsies:
				curCapacity--;
				break;
			case MachinesStartingFood:
				machineCapacities[curEvent.machines.machineType.ordinal()]++;
				break;
			case MachinesDoneFood:
				machineCapacities[curEvent.machines.machineType.ordinal()]--;
				break;
			default:
				break;
			}
			if(curCustomers > numCustomers || curCooks > numCooks || curCapacity > numTables) {
				return false;
			}
			for(int m : machineCapacities) {
				if(m > machineCount) {
					return false;
				}
			}
		}
		return true;
	}

	public static boolean validateSimulation(List<SimulationEvent> events) {
		try {
			check(events.get(0).event == SimulationEvent.EventType.SimulationStarting,
					"Simulation didn't start with initiation event");
			check(events.get(events.size() - 1).event == SimulationEvent.EventType.SimulationEnded,
					"Simulation didn't end with termination event");
			
			// this is my method
			check(checkParams(events), "you exceeded capacity in machines/cooks/customers/eaters");

			return true;
		} catch (InvalidSimulationException e) {
			return false;
		}

	}
}
